Please help with your inputs on Exam test questions

-------------------------------------------------------------------------------------

1) Find the pod that consumes the most CPU in all namespace(including kube-system) in all cluster(currently we have single cluster). Then, store the result in the file high_cpu_pod.txt with the following format: pod_name,namespace .

Run top command for pod (for all pods under all namespaces)

kubectl top pods --all-namespaces 

If asked for sort use below command

kubectl top pods --sort-by=cpu or mem --all-namespaces

store the output in file- high_cpu_pod.txt with the following format: pod_name,namespace

How to format store?
>>controlplane $ kubectl get pods -A -o custom-columns=POD-NAME:.metadata.name,NAMESPACE:.metadata.namespace > pod.txt
controlplane $ cat pod.txt
POD-NAME                                   NAMESPACE
nginx-bf5d5cf98-f8hp8                      default
nginx-bf5d5cf98-kgrls                      default
calico-kube-controllers-75bdb5b75d-2b6mr   kube-system
canal-q652m                                kube-system
canal-wzjz6                                kube-system
coredns-5c69dbb7bd-6xvhl                   kube-system

** SEE if this is how you want...
-------------------------------------------------------------------------------------

2) Create a Kubernetes Pod configuration to facilitate real-time monitoring of a log file. Specifically, you need to set up a Pod named alpine-pod-pod that runs an Alpine Linux container.

Requirements:

Name the Pod alpine-pod-pod
Use alpine:latest image
Container name alpine-container
Configure the container to execute the tail -f /config/log.txt command(using args ) with /bin/sh (using command ) to continuously monitor and display the contents of a log file.

Created alpine pod is going in "Completed" status or ImagePullBackoff.
** TRY THIS

controlplane $ cat alpine.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: alpine-pod-pod
spec:
  containers:
  - name: alpine-container
    image: alpine:latest
    command: ["/bin/sh"] ## command to run shell inside container
    args:   [ "-c", "while true; do tail -f /config/log.txt; sleep 10;done" ]
           # args: ["-c" >> command to run in shell
           # tail will work only single time and conatiner would stop so need to loop it so while loop 

controlplane $ kubectl get pods | grep alpine
alpine-pod-pod          1/1     Running   0          3m35s


-------------------------------------------------------------------------------------------------------------------------

Question No 3- 
The deployment named video-app has experienced multiple rolling updates and rollbacks. Your task is to total revision of this deployment and record the image name used in 3rd revision to file app-file.txt in this format REVISION_TOTAL_COUNT,IMAGE_NAME .

Deployment yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
  creationTimestamp: "2024-08-12T16:25:12Z"
  generation: 3
  labels:
    app: video-app
  name: video-app
  namespace: default
  resourceVersion: "2490"
  uid: 795fc837-1a7b-4b78-b066-c1e70806d2b9
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: video-app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
	   app: video-app
    spec:
      containers:
      - image: redis:7.0.13
        imagePullPolicy: IfNotPresent
        name: redis
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2024-08-12T16:25:27Z"
    lastUpdateTime: "2024-08-12T16:25:27Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2024-08-12T16:25:12Z"
    lastUpdateTime: "2024-08-12T16:25:42Z"
    message: ReplicaSet "video-app-7f5bc58cd6" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
	 observedGeneration: 3
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
  
kubectl get deployment video-app -o custom-columns=REVISION_TOTAL_COUNT:.metadata.generation,IMAGE_NAME:.'.spec.containers[0].image' > app-file.txt
 
cat app-file.txt
 
REVISION_TOTAL_COUNT   IMAGE_NAME
3                      redis:7.0.13

kubectl get deployment video-app -o custom-columns=REVISION_TOTAL_COUNT:.status.observedGeneration,IMAGE_NAME:.'.spec
.containers[0].image' > app-file.txt

cat app-file.txt 
REVISION_TOTAL_COUNT   IMAGE_NAME
3                      redis:7.0.13

ISSUE- Using both metadata.generation and status.observedGeneration still validation fails of this question on the KillrKoda. Am I missing something in collecting this output?

TRAINER INPUTS:

??

------------------------------------------------------------------------------------------------------------------------

Question No 4- 
Due to a missing feature in the current version. To resolve this issue, perform a rollback of the deployment redis-deployment to the previous version. After rolling back the deployment, save the image currently in use to the rolling-back-image.txt file, and finally increase the replica count to 3 

kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
redis-deployment   1/1     1            1           24s

kubectl get rs
NAME                          DESIRED   CURRENT   READY   AGE
redis-deployment-66c8689579   1         1         1       26s
redis-deployment-66f7989d     0         0         0       29s

kubectl describe deployment redis-deployment
Name:                   redis-deployment
Namespace:              default
CreationTimestamp:      Wed, 14 Aug 2024 14:34:25 +0000
Labels:                 app=redis-deployment
Annotations:            deployment.kubernetes.io/revision: 2
Selector:               app=redis-deployment
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=redis-deployment
  Containers:
   redis:
    Image:         redis:7.2.1
    Port:          <none>
    Host Port:     <none>
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  redis-deployment-66f7989d (0/0 replicas created)
NewReplicaSet:   redis-deployment-66c8689579 (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  42s   deployment-controller  Scaled up replica set redis-deployment-66f7989d to 1
  Normal  ScalingReplicaSet  39s   deployment-controller  Scaled up replica set redis-deployment-66c8689579 to 1
  Normal  ScalingReplicaSet  27s   deployment-controller  Scaled down replica set redis-deployment-66f7989d to 0 from 1

kubectl rollout undo deployment redis-deployment
deployment.apps/redis-deployment rolled back

kubectl rollout status deployment redis-deployment
deployment "redis-deployment" successfully rolled out

kubectl describe redis-deployment
error: the server doesn't have a resource type "redis-deployment"
controlplane $ kubectl describe deployment redis-deployment 
Name:                   redis-deployment
Namespace:              default
CreationTimestamp:      Wed, 14 Aug 2024 14:34:25 +0000
Labels:                 app=redis-deployment
Annotations:            deployment.kubernetes.io/revision: 3
Selector:               app=redis-deployment
Replicas:               1 desired | 1 updated | 1 total | 1 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=redis-deployment
  Containers:
   redis:
    Image:         redis:7.0.13
    Port:          <none>
    Host Port:     <none>
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Available      True    MinimumReplicasAvailable
  Progressing    True    NewReplicaSetAvailable
OldReplicaSets:  redis-deployment-66c8689579 (0/0 replicas created)
NewReplicaSet:   redis-deployment-66f7989d (1/1 replicas created)
Events:
  Type    Reason             Age   From                   Message
  ----    ------             ----  ----                   -------
  Normal  ScalingReplicaSet  107s  deployment-controller  Scaled up replica set redis-deployment-66f7989d to 1
  Normal  ScalingReplicaSet  104s  deployment-controller  Scaled up replica set redis-deployment-66c8689579 to 1
  Normal  ScalingReplicaSet  92s   deployment-controller  Scaled down replica set redis-deployment-66f7989d to 0 from 1
  Normal  ScalingReplicaSet  39s   deployment-controller  Scaled up replica set redis-deployment-66f7989d to 1 from 0
  Normal  ScalingReplicaSet  36s   deployment-controller  Scaled down replica set redis-deployment-66c8689579 to 0 from 1

kubectl get deployment redis-deployment -o custom-columns=IMAGE_NAME:.'.spec.containers[0].image' > rolling-back-image.txt

cat rolling-back-image.txt 

Output

IMAGE_NAME
redis:7.0.13

kubectl scale deployment redis-deployment --replicas=3
deployment.apps/redis-deployment scaled

kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
redis-deployment   3/3     3            3           2m53s

kubectl describe deployment redis-deployment
Name:                   redis-deployment
Namespace:              default
CreationTimestamp:      Wed, 14 Aug 2024 14:34:25 +0000
Labels:                 app=redis-deployment
Annotations:            deployment.kubernetes.io/revision: 3
Selector:               app=redis-deployment
Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  25% max unavailable, 25% max surge
Pod Template:
  Labels:  app=redis-deployment
  Containers:
   redis:
    Image:         redis:7.0.13
    Port:          <none>
    Host Port:     <none>
    Environment:   <none>
    Mounts:        <none>
  Volumes:         <none>
  Node-Selectors:  <none>
  Tolerations:     <none>
Conditions:
  Type           Status  Reason
  ----           ------  ------
  Progressing    True    NewReplicaSetAvailable
  Available      True    MinimumReplicasAvailable
OldReplicaSets:  redis-deployment-66c8689579 (0/0 replicas created)
NewReplicaSet:   redis-deployment-66f7989d (3/3 replicas created)
Events:
  Type    Reason             Age    From                   Message
  ----    ------             ----   ----                   -------
  Normal  ScalingReplicaSet  5m22s  deployment-controller  Scaled up replica set redis-deployment-66f7989d to 1
  Normal  ScalingReplicaSet  5m19s  deployment-controller  Scaled up replica set redis-deployment-66c8689579 to 1
  Normal  ScalingReplicaSet  5m7s   deployment-controller  Scaled down replica set redis-deployment-66f7989d to 0 from 1
  Normal  ScalingReplicaSet  4m14s  deployment-controller  Scaled up replica set redis-deployment-66f7989d to 1 from 0
  Normal  ScalingReplicaSet  4m11s  deployment-controller  Scaled down replica set redis-deployment-66c8689579 to 0 from 1
  Normal  ScalingReplicaSet  2m37s  deployment-controller  Scaled up replica set redis-deployment-66f7989d to 3 from 1

ISSUE- Validation for this question still failed in KillrCoda. Am I missing some step or incorrect steps followed in answering this question?

TRAINER INPUTS:

??

------------------------------------------------------------------------------------------------------------------------

Question No 5-

